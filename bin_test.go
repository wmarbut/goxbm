// Code generated by go-bindata.
// sources:
// test_data/test_image.png
// test_data/test_image.xbm
// test_data/test_image.xcf
// test_data/test_image2.png
// test_data/test_image2.xbm
// test_data/test_image2.xcf
// DO NOT EDIT!

package goxbm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_imagePng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x00\xb1\xb9\x38\x98\x18\x18\x18\x98\x02\x22\x5e\x31\x30\x30\x70\x16\x78\x44\x16\x33\x30\x70\x0b\x83\x30\x23\xc3\xac\x39\x12\x0c\x0c\x8c\x8e\x9e\x2e\x8e\x21\x12\x92\x8c\x66\x8c\x27\xff\x31\xfe\xff\xff\x9f\x01\x37\x60\xc2\x23\x47\x6b\xe9\x41\x0c\x16\x39\x32\xb3\xbf\x75\xd8\xc0\x02\x62\x7b\xba\xfa\xb9\xac\x73\x4a\x68\x02\x04\x00\x00\xff\xff\xb1\x7a\x29\xc0\x8f\x01\x00\x00")

func test_imagePngBytes() ([]byte, error) {
	return bindataRead(
		_test_imagePng,
		"test_image.png",
	)
}

func test_imagePng() (*asset, error) {
	bytes, err := test_imagePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_image.png", size: 399, mode: os.FileMode(420), modTime: time.Unix(1490210010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_imageXbm = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x4e\x49\x4d\xcb\xcc\x4b\x55\xa8\x48\xca\x8d\x2f\xcf\x4c\x29\xc9\x50\x30\x34\xe0\x42\x16\xcc\x48\xcd\x4c\xcf\x28\x01\x89\x16\x97\x24\x96\x64\x26\x2b\x94\xe6\x15\x67\xa6\xe7\xa5\xa6\x28\x24\x67\x24\x16\x81\x95\x24\x65\x96\x14\x47\xc7\x2a\xd8\x2a\x54\x1b\x54\x18\x18\xe8\x28\x90\x4b\xa6\xa5\x81\xd9\xc6\xa4\xb2\x6b\xad\xb9\x00\x01\x00\x00\xff\xff\x5b\xd3\x95\x85\xc7\x00\x00\x00")

func test_imageXbmBytes() ([]byte, error) {
	return bindataRead(
		_test_imageXbm,
		"test_image.xbm",
	)
}

func test_imageXbm() (*asset, error) {
	bytes, err := test_imageXbmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_image.xbm", size: 199, mode: os.FileMode(420), modTime: time.Unix(1490222453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_imageXcf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x4d\x6e\xb3\x30\x10\x7d\xc0\xf7\x4b\x9a\x26\xfd\x5d\x55\xaa\x97\xb0\xa0\x0a\xea\x0d\x92\x45\xd4\x45\xa4\x4a\x3d\x01\x21\x86\x58\x01\x1c\x81\xa3\x26\xab\xaa\x37\x68\x0f\xd0\x4b\xf4\x82\xa9\x4c\x4c\x33\xf9\x59\x74\xa4\x91\x1f\x6f\xde\x0c\xcf\x0c\xa9\xc8\xe7\x6c\x19\x27\x2c\x11\x19\x07\x00\xd7\xa4\x8e\x33\x00\x96\x05\xe0\x02\xc0\xbf\xfe\x1b\xa0\x13\xc0\x25\x80\x5f\x00\x7e\x03\xb8\x36\x58\xeb\xae\x00\x6b\x08\xa0\xad\xc7\x06\xb1\xcc\x73\x5e\x28\x98\xe2\xf9\xa0\xe4\x91\xe2\x13\xf6\x2c\xd4\x94\x0d\x1f\x46\x8f\xba\xd2\xad\xa5\x22\x8f\x52\x1e\xa4\xa5\x98\x18\xb5\x05\xaf\x52\xab\x8c\xb3\x4a\x66\x62\xe2\xbb\x5e\x92\xc6\x32\x93\x25\xf3\xea\x23\x28\xd3\x71\xc4\x7a\x77\xbd\x3a\x8e\x80\xd0\x00\xdf\x77\xbd\xf1\x91\xd6\x70\x5f\x78\x08\x74\xeb\xb2\x9a\x47\xb1\x28\x52\x16\x36\x93\x7d\xd7\x5b\x1d\x23\x0d\x17\x2c\x0a\xa1\x98\x28\xe2\x29\xaf\x74\xbf\x4c\x92\x8a\x2b\x46\xbb\x0f\xa9\x0d\xb3\xdb\x8a\x6d\x58\x9f\x9b\xd3\xfe\x30\x04\xdd\x51\xab\x1f\xc5\xb3\xb4\x94\x8b\xa2\xfe\x74\xb6\xa1\xff\x98\xad\xac\xf5\xe6\xc8\x86\xfe\x1b\xac\xe3\x86\x60\x97\xe0\x16\xc1\x27\x04\xb7\x09\xee\x98\xb9\x4d\xfc\x25\xb5\xe6\xef\xb0\xb7\x65\x3b\xdf\xb3\xee\x00\xf6\xeb\x2e\x67\xbf\xeb\x87\x70\x1d\x7e\x27\xd1\x77\x9e\x78\xc6\x63\x25\x64\xc1\x46\x51\x35\x03\x79\x5d\x73\xd5\x97\x1f\x5e\xf5\x94\x68\xba\x1b\x2b\xd4\xb5\xb5\x75\xed\xdc\x12\x07\x16\xe0\xdc\xef\x3a\x76\x06\xb5\x63\x84\xeb\xaf\x00\x00\x00\xff\xff\x30\x3e\xe3\xcd\x47\x03\x00\x00")

func test_imageXcfBytes() ([]byte, error) {
	return bindataRead(
		_test_imageXcf,
		"test_image.xcf",
	)
}

func test_imageXcf() (*asset, error) {
	bytes, err := test_imageXcfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_image.xcf", size: 839, mode: os.FileMode(420), modTime: time.Unix(1490209977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_image2Png = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x61\x60\x60\xe0\xe2\x60\x62\x60\x60\xb0\x36\x7f\xb9\x91\x81\x81\x81\xb3\xc0\x23\xb2\x98\x81\x81\x5b\x18\x84\x19\x19\x66\xcd\x91\x60\x60\x60\xca\xf5\x74\x71\x0c\xd1\x10\x65\x4c\x62\x9a\xfb\x97\xf1\xff\xff\xff\x0c\xb8\x01\x23\x23\x23\x1e\x59\x26\x3c\x72\x04\xc1\xa8\xe6\x91\xa1\xd9\xca\x95\x59\x44\x86\xff\x1b\x37\x88\xed\xe9\xea\xe7\xb2\xce\x29\xa1\x09\x10\x00\x00\xff\xff\x35\x62\xe1\x41\xbb\x02\x00\x00")

func test_image2PngBytes() ([]byte, error) {
	return bindataRead(
		_test_image2Png,
		"test_image2.png",
	)
}

func test_image2Png() (*asset, error) {
	bytes, err := test_image2PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_image2.png", size: 699, mode: os.FileMode(420), modTime: time.Unix(1490232485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_image2Xbm = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x4e\x49\x4d\xcb\xcc\x4b\x55\xa8\x48\xca\x8d\x2f\xcf\x4c\x29\xc9\x50\x30\x32\xe0\x42\x16\xcc\x48\xcd\x4c\xcf\x28\x51\x30\x34\xe0\x2a\x2e\x49\x2c\xc9\x4c\x56\x28\xcd\x2b\xce\x4c\xcf\x4b\x4d\x51\x48\xce\x48\x2c\x02\x2b\x49\xca\x2c\x29\x8e\x8e\x55\xb0\x55\xa8\x36\xa8\x30\x30\xd0\x51\x30\xa8\x48\x4b\x06\x91\x06\x69\x60\x72\x50\x8b\xd4\x5a\x73\x01\x02\x00\x00\xff\xff\x96\xe3\x12\x31\x03\x01\x00\x00")

func test_image2XbmBytes() ([]byte, error) {
	return bindataRead(
		_test_image2Xbm,
		"test_image2.xbm",
	)
}

func test_image2Xbm() (*asset, error) {
	bytes, err := test_image2XbmBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_image2.xbm", size: 259, mode: os.FileMode(420), modTime: time.Unix(1490233781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_image2Xcf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x53\xbb\x6e\xea\x40\x10\x3d\xb6\xaf\xee\xbd\x36\x97\x0b\x79\x56\x29\xb6\xb4\x0b\x47\xf0\x0b\xa4\x40\x29\x90\x22\xe5\x0b\x8c\x59\x9b\x15\xb6\x17\xd9\x8b\x02\x55\x94\x3a\x4d\xf2\x05\xf9\x84\x48\xf9\x41\xa2\x35\x6b\x31\x3c\x0a\xba\x8c\xb4\xda\xc3\x99\x33\xa3\xd9\x33\x38\x15\xf9\x9c\x2d\xe3\x84\x25\x22\xe3\x00\x70\x09\xc0\xc3\x26\xce\x00\x58\x16\x80\x0b\x00\x7f\x07\x6f\x80\x3e\x46\xf4\x0b\x80\x03\xe0\xda\x60\xad\xbb\x02\xac\x21\x80\xb6\x6e\x1b\xc6\x32\xcf\x79\xa1\x60\x92\xe7\x77\x25\x8f\x14\x9f\xb0\x27\xa1\xa6\x6c\x78\x3f\x7a\xd0\x99\x6e\x2d\x15\x79\x94\xf2\x30\x2d\xc5\xc4\xa8\x2d\xf8\x95\x5a\x65\x9c\x55\x32\x13\x93\xc0\xf3\x93\x34\x96\x99\x2c\x99\x5f\x5f\x61\x99\x8e\x23\xd6\xbb\xed\xd5\x71\x04\xf4\x0d\x08\x02\xcf\x1f\x1f\x29\xed\xef\x0b\x0f\x81\x2e\x5d\x56\xf3\x28\x16\x45\xca\xfa\x4d\xe7\xc0\xf3\x57\xc7\x48\xc3\x85\x8b\x42\x28\x26\x8a\x78\xca\x2b\x5d\x2f\x93\xa4\xe2\x8a\xd1\xea\x43\x6a\xc3\xec\x96\x62\x1b\xd6\xd7\xe6\x76\x5c\x43\xd0\x1d\xb5\x06\x51\x3c\x4b\x4b\xb9\x28\x6a\xeb\x6c\x43\xff\x36\x5b\x59\xeb\xcd\x91\x0d\xb9\x06\xeb\xb8\x21\xd8\x23\xb8\x45\xf0\x3f\x82\xdb\x04\x77\x4c\xdf\x26\xfe\x90\x5c\xf3\xef\xb0\xb7\x69\x3b\xdf\x1b\xdd\x01\xec\x97\x5d\xce\x7e\xd7\x3f\xdc\xb5\xfb\x23\x87\xcc\xd6\x79\xe4\x19\x8f\x95\x90\x05\x1b\x45\xd5\x0c\xe4\x69\x8d\xad\xcf\x27\xda\xfa\x9f\x68\xba\xe6\x83\x21\x0e\x59\x5b\x87\x9c\x57\x32\x81\x05\x38\x1f\xbb\xee\x38\x9f\xb5\x3b\x27\xbe\xe7\x3b\x00\x00\xff\xff\x21\xa8\x8e\x4a\xd7\x03\x00\x00")

func test_image2XcfBytes() ([]byte, error) {
	return bindataRead(
		_test_image2Xcf,
		"test_image2.xcf",
	)
}

func test_image2Xcf() (*asset, error) {
	bytes, err := test_image2XcfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_image2.xcf", size: 983, mode: os.FileMode(420), modTime: time.Unix(1490232421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_image.png": test_imagePng,
	"test_image.xbm": test_imageXbm,
	"test_image.xcf": test_imageXcf,
	"test_image2.png": test_image2Png,
	"test_image2.xbm": test_image2Xbm,
	"test_image2.xcf": test_image2Xcf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"test_image.png": &bintree{test_imagePng, map[string]*bintree{}},
	"test_image.xbm": &bintree{test_imageXbm, map[string]*bintree{}},
	"test_image.xcf": &bintree{test_imageXcf, map[string]*bintree{}},
	"test_image2.png": &bintree{test_image2Png, map[string]*bintree{}},
	"test_image2.xbm": &bintree{test_image2Xbm, map[string]*bintree{}},
	"test_image2.xcf": &bintree{test_image2Xcf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

